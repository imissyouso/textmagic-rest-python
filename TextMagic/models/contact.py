# coding: utf-8

"""
    TextMagic API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@textmagi.biz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Contact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'favorited': 'bool',
        'blocked': 'bool',
        'first_name': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'phone': 'str',
        'email': 'str',
        'country': 'Country',
        'custom_fields': 'list[ContactCustomField]',
        'user': 'User',
        'lists': 'list[Group]',
        'phone_type': 'str',
        'avatar': 'ContactImage',
        'notes': 'list[ContactNote]'
    }

    attribute_map = {
        'id': 'id',
        'favorited': 'favorited',
        'blocked': 'blocked',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'company_name': 'companyName',
        'phone': 'phone',
        'email': 'email',
        'country': 'country',
        'custom_fields': 'customFields',
        'user': 'user',
        'lists': 'lists',
        'phone_type': 'phoneType',
        'avatar': 'avatar',
        'notes': 'notes'
    }

    def __init__(self, id=None, favorited=None, blocked=None, first_name=None, last_name=None, company_name=None, phone=None, email=None, country=None, custom_fields=None, user=None, lists=None, phone_type=None, avatar=None, notes=None):  # noqa: E501
        """Contact - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._favorited = None
        self._blocked = None
        self._first_name = None
        self._last_name = None
        self._company_name = None
        self._phone = None
        self._email = None
        self._country = None
        self._custom_fields = None
        self._user = None
        self._lists = None
        self._phone_type = None
        self._avatar = None
        self._notes = None
        self.discriminator = None

        self.id = id
        self.favorited = favorited
        self.blocked = blocked
        self.first_name = first_name
        self.last_name = last_name
        self.company_name = company_name
        self.phone = phone
        self.email = email
        self.country = country
        self.custom_fields = custom_fields
        self.user = user
        self.lists = lists
        self.phone_type = phone_type
        self.avatar = avatar
        self.notes = notes

    @property
    def id(self):
        """Gets the id of this Contact.  # noqa: E501


        :return: The id of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.


        :param id: The id of this Contact.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def favorited(self):
        """Gets the favorited of this Contact.  # noqa: E501


        :return: The favorited of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._favorited

    @favorited.setter
    def favorited(self, favorited):
        """Sets the favorited of this Contact.


        :param favorited: The favorited of this Contact.  # noqa: E501
        :type: bool
        """

        self._favorited = favorited

    @property
    def blocked(self):
        """Gets the blocked of this Contact.  # noqa: E501


        :return: The blocked of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this Contact.


        :param blocked: The blocked of this Contact.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def first_name(self):
        """Gets the first_name of this Contact.  # noqa: E501


        :return: The first_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.


        :param first_name: The first_name of this Contact.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Contact.  # noqa: E501


        :return: The last_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.


        :param last_name: The last_name of this Contact.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this Contact.  # noqa: E501


        :return: The company_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Contact.


        :param company_name: The company_name of this Contact.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def phone(self):
        """Gets the phone of this Contact.  # noqa: E501


        :return: The phone of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Contact.


        :param phone: The phone of this Contact.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this Contact.  # noqa: E501


        :return: The email of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def country(self):
        """Gets the country of this Contact.  # noqa: E501


        :return: The country of this Contact.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Contact.


        :param country: The country of this Contact.  # noqa: E501
        :type: Country
        """

        self._country = country

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Contact.  # noqa: E501


        :return: The custom_fields of this Contact.  # noqa: E501
        :rtype: list[ContactCustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Contact.


        :param custom_fields: The custom_fields of this Contact.  # noqa: E501
        :type: list[ContactCustomField]
        """

        self._custom_fields = custom_fields

    @property
    def user(self):
        """Gets the user of this Contact.  # noqa: E501


        :return: The user of this Contact.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Contact.


        :param user: The user of this Contact.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def lists(self):
        """Gets the lists of this Contact.  # noqa: E501


        :return: The lists of this Contact.  # noqa: E501
        :rtype: list[Group]
        """
        return self._lists

    @lists.setter
    def lists(self, lists):
        """Sets the lists of this Contact.


        :param lists: The lists of this Contact.  # noqa: E501
        :type: list[Group]
        """

        self._lists = lists

    @property
    def phone_type(self):
        """Gets the phone_type of this Contact.  # noqa: E501


        :return: The phone_type of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._phone_type

    @phone_type.setter
    def phone_type(self, phone_type):
        """Sets the phone_type of this Contact.


        :param phone_type: The phone_type of this Contact.  # noqa: E501
        :type: str
        """

        self._phone_type = phone_type

    @property
    def avatar(self):
        """Gets the avatar of this Contact.  # noqa: E501


        :return: The avatar of this Contact.  # noqa: E501
        :rtype: ContactImage
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Contact.


        :param avatar: The avatar of this Contact.  # noqa: E501
        :type: ContactImage
        """

        self._avatar = avatar

    @property
    def notes(self):
        """Gets the notes of this Contact.  # noqa: E501


        :return: The notes of this Contact.  # noqa: E501
        :rtype: list[ContactNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Contact.


        :param notes: The notes of this Contact.  # noqa: E501
        :type: list[ContactNote]
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
