# coding: utf-8

"""
    TextMagic API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@textmagi.biz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DoAuthInputObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'app_name': 'str',
        'app_version': 'str',
        'device_id': 'str',
        'push_service_type': 'str',
        'tfa_code': 'str',
        'tfa_id': 'str'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'app_name': 'appName',
        'app_version': 'appVersion',
        'device_id': 'deviceId',
        'push_service_type': 'pushServiceType',
        'tfa_code': 'tfaCode',
        'tfa_id': 'tfaId'
    }

    def __init__(self, username=None, password=None, app_name=None, app_version=None, device_id=None, push_service_type=None, tfa_code=None, tfa_id=None):  # noqa: E501
        """DoAuthInputObject - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._password = None
        self._app_name = None
        self._app_version = None
        self._device_id = None
        self._push_service_type = None
        self._tfa_code = None
        self._tfa_id = None
        self.discriminator = None

        self.username = username
        self.password = password
        if app_name is not None:
            self.app_name = app_name
        if app_version is not None:
            self.app_version = app_version
        if device_id is not None:
            self.device_id = device_id
        if push_service_type is not None:
            self.push_service_type = push_service_type
        if tfa_code is not None:
            self.tfa_code = tfa_code
        if tfa_id is not None:
            self.tfa_id = tfa_id

    @property
    def username(self):
        """Gets the username of this DoAuthInputObject.  # noqa: E501

        Account username or email  # noqa: E501

        :return: The username of this DoAuthInputObject.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DoAuthInputObject.

        Account username or email  # noqa: E501

        :param username: The username of this DoAuthInputObject.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this DoAuthInputObject.  # noqa: E501

        Account password  # noqa: E501

        :return: The password of this DoAuthInputObject.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DoAuthInputObject.

        Account password  # noqa: E501

        :param password: The password of this DoAuthInputObject.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def app_name(self):
        """Gets the app_name of this DoAuthInputObject.  # noqa: E501

        Application name  # noqa: E501

        :return: The app_name of this DoAuthInputObject.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this DoAuthInputObject.

        Application name  # noqa: E501

        :param app_name: The app_name of this DoAuthInputObject.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_version(self):
        """Gets the app_version of this DoAuthInputObject.  # noqa: E501

        Application version  # noqa: E501

        :return: The app_version of this DoAuthInputObject.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this DoAuthInputObject.

        Application version  # noqa: E501

        :param app_version: The app_version of this DoAuthInputObject.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def device_id(self):
        """Gets the device_id of this DoAuthInputObject.  # noqa: E501

        Device ID for push notification service  # noqa: E501

        :return: The device_id of this DoAuthInputObject.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DoAuthInputObject.

        Device ID for push notification service  # noqa: E501

        :param device_id: The device_id of this DoAuthInputObject.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def push_service_type(self):
        """Gets the push_service_type of this DoAuthInputObject.  # noqa: E501

        required when deviceId provided. Push notification service type: a for Apple Push Notifications, g for Google Cloud Messaging  # noqa: E501

        :return: The push_service_type of this DoAuthInputObject.  # noqa: E501
        :rtype: str
        """
        return self._push_service_type

    @push_service_type.setter
    def push_service_type(self, push_service_type):
        """Sets the push_service_type of this DoAuthInputObject.

        required when deviceId provided. Push notification service type: a for Apple Push Notifications, g for Google Cloud Messaging  # noqa: E501

        :param push_service_type: The push_service_type of this DoAuthInputObject.  # noqa: E501
        :type: str
        """

        self._push_service_type = push_service_type

    @property
    def tfa_code(self):
        """Gets the tfa_code of this DoAuthInputObject.  # noqa: E501

        required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)  # noqa: E501

        :return: The tfa_code of this DoAuthInputObject.  # noqa: E501
        :rtype: str
        """
        return self._tfa_code

    @tfa_code.setter
    def tfa_code(self, tfa_code):
        """Sets the tfa_code of this DoAuthInputObject.

        required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)  # noqa: E501

        :param tfa_code: The tfa_code of this DoAuthInputObject.  # noqa: E501
        :type: str
        """

        self._tfa_code = tfa_code

    @property
    def tfa_id(self):
        """Gets the tfa_id of this DoAuthInputObject.  # noqa: E501

        required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)  # noqa: E501

        :return: The tfa_id of this DoAuthInputObject.  # noqa: E501
        :rtype: str
        """
        return self._tfa_id

    @tfa_id.setter
    def tfa_id(self, tfa_id):
        """Sets the tfa_id of this DoAuthInputObject.

        required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)  # noqa: E501

        :param tfa_id: The tfa_id of this DoAuthInputObject.  # noqa: E501
        :type: str
        """

        self._tfa_id = tfa_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DoAuthInputObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DoAuthInputObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
