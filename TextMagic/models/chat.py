# coding: utf-8

"""
    TextMagic API Documentation

    # Overview ## Introduction 22 <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png)   # noqa: E501

    OpenAPI spec version: 2
    Contact: support@textmagi.biz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Chat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'original_id': 'int',
        'phone': 'str',
        'contact': 'Contact',
        'unsubscribed_contact_id': 'int',
        'unread': 'int',
        'updated_at': 'datetime',
        'status': 'str',
        'mute': 'int',
        'last_message': 'str',
        'direction': 'str',
        '_from': 'str',
        'muted_until': 'str',
        'time_left_mute': 'int',
        'country': 'Country'
    }

    attribute_map = {
        'id': 'id',
        'original_id': 'originalId',
        'phone': 'phone',
        'contact': 'contact',
        'unsubscribed_contact_id': 'unsubscribedContactId',
        'unread': 'unread',
        'updated_at': 'updatedAt',
        'status': 'status',
        'mute': 'mute',
        'last_message': 'lastMessage',
        'direction': 'direction',
        '_from': 'from',
        'muted_until': 'mutedUntil',
        'time_left_mute': 'timeLeftMute',
        'country': 'country'
    }

    def __init__(self, id=None, original_id=None, phone=None, contact=None, unsubscribed_contact_id=None, unread=None, updated_at=None, status=None, mute=None, last_message=None, direction=None, _from=None, muted_until=None, time_left_mute=None, country=None):  # noqa: E501
        """Chat - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._original_id = None
        self._phone = None
        self._contact = None
        self._unsubscribed_contact_id = None
        self._unread = None
        self._updated_at = None
        self._status = None
        self._mute = None
        self._last_message = None
        self._direction = None
        self.__from = None
        self._muted_until = None
        self._time_left_mute = None
        self._country = None
        self.discriminator = None

        self.id = id
        self.original_id = original_id
        self.phone = phone
        self.contact = contact
        self.unsubscribed_contact_id = unsubscribed_contact_id
        self.unread = unread
        self.updated_at = updated_at
        self.status = status
        self.mute = mute
        self.last_message = last_message
        self.direction = direction
        self._from = _from
        self.muted_until = muted_until
        self.time_left_mute = time_left_mute
        self.country = country

    @property
    def id(self):
        """Gets the id of this Chat.  # noqa: E501


        :return: The id of this Chat.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Chat.


        :param id: The id of this Chat.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def original_id(self):
        """Gets the original_id of this Chat.  # noqa: E501


        :return: The original_id of this Chat.  # noqa: E501
        :rtype: int
        """
        return self._original_id

    @original_id.setter
    def original_id(self, original_id):
        """Sets the original_id of this Chat.


        :param original_id: The original_id of this Chat.  # noqa: E501
        :type: int
        """

        self._original_id = original_id

    @property
    def phone(self):
        """Gets the phone of this Chat.  # noqa: E501


        :return: The phone of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Chat.


        :param phone: The phone of this Chat.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def contact(self):
        """Gets the contact of this Chat.  # noqa: E501


        :return: The contact of this Chat.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Chat.


        :param contact: The contact of this Chat.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def unsubscribed_contact_id(self):
        """Gets the unsubscribed_contact_id of this Chat.  # noqa: E501


        :return: The unsubscribed_contact_id of this Chat.  # noqa: E501
        :rtype: int
        """
        return self._unsubscribed_contact_id

    @unsubscribed_contact_id.setter
    def unsubscribed_contact_id(self, unsubscribed_contact_id):
        """Sets the unsubscribed_contact_id of this Chat.


        :param unsubscribed_contact_id: The unsubscribed_contact_id of this Chat.  # noqa: E501
        :type: int
        """

        self._unsubscribed_contact_id = unsubscribed_contact_id

    @property
    def unread(self):
        """Gets the unread of this Chat.  # noqa: E501


        :return: The unread of this Chat.  # noqa: E501
        :rtype: int
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Chat.


        :param unread: The unread of this Chat.  # noqa: E501
        :type: int
        """

        self._unread = unread

    @property
    def updated_at(self):
        """Gets the updated_at of this Chat.  # noqa: E501


        :return: The updated_at of this Chat.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Chat.


        :param updated_at: The updated_at of this Chat.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def status(self):
        """Gets the status of this Chat.  # noqa: E501


        :return: The status of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Chat.


        :param status: The status of this Chat.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def mute(self):
        """Gets the mute of this Chat.  # noqa: E501


        :return: The mute of this Chat.  # noqa: E501
        :rtype: int
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this Chat.


        :param mute: The mute of this Chat.  # noqa: E501
        :type: int
        """

        self._mute = mute

    @property
    def last_message(self):
        """Gets the last_message of this Chat.  # noqa: E501


        :return: The last_message of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this Chat.


        :param last_message: The last_message of this Chat.  # noqa: E501
        :type: str
        """

        self._last_message = last_message

    @property
    def direction(self):
        """Gets the direction of this Chat.  # noqa: E501


        :return: The direction of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Chat.


        :param direction: The direction of this Chat.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def _from(self):
        """Gets the _from of this Chat.  # noqa: E501


        :return: The _from of this Chat.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Chat.


        :param _from: The _from of this Chat.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def muted_until(self):
        """Gets the muted_until of this Chat.  # noqa: E501


        :return: The muted_until of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._muted_until

    @muted_until.setter
    def muted_until(self, muted_until):
        """Sets the muted_until of this Chat.


        :param muted_until: The muted_until of this Chat.  # noqa: E501
        :type: str
        """

        self._muted_until = muted_until

    @property
    def time_left_mute(self):
        """Gets the time_left_mute of this Chat.  # noqa: E501


        :return: The time_left_mute of this Chat.  # noqa: E501
        :rtype: int
        """
        return self._time_left_mute

    @time_left_mute.setter
    def time_left_mute(self, time_left_mute):
        """Sets the time_left_mute of this Chat.


        :param time_left_mute: The time_left_mute of this Chat.  # noqa: E501
        :type: int
        """

        self._time_left_mute = time_left_mute

    @property
    def country(self):
        """Gets the country of this Chat.  # noqa: E501


        :return: The country of this Chat.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Chat.


        :param country: The country of this Chat.  # noqa: E501
        :type: Country
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Chat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Chat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
