# coding: utf-8

"""
    TextMagic API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@textmagi.biz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateSurveyInputObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'contacts': 'str',
        'lists': 'str',
        'phones': 'str',
        'country': 'object'
    }

    attribute_map = {
        'name': 'name',
        'contacts': 'contacts',
        'lists': 'lists',
        'phones': 'phones',
        'country': 'country'
    }

    def __init__(self, name=None, contacts=None, lists=None, phones=None, country=None):  # noqa: E501
        """UpdateSurveyInputObject - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._contacts = None
        self._lists = None
        self._phones = None
        self._country = None
        self.discriminator = None

        self.name = name
        if contacts is not None:
            self.contacts = contacts
        if lists is not None:
            self.lists = lists
        if phones is not None:
            self.phones = phones
        if country is not None:
            self.country = country

    @property
    def name(self):
        """Gets the name of this UpdateSurveyInputObject.  # noqa: E501

        Survey name  # noqa: E501

        :return: The name of this UpdateSurveyInputObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSurveyInputObject.

        Survey name  # noqa: E501

        :param name: The name of this UpdateSurveyInputObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def contacts(self):
        """Gets the contacts of this UpdateSurveyInputObject.  # noqa: E501

        Array of contact resources id message will be sent to  # noqa: E501

        :return: The contacts of this UpdateSurveyInputObject.  # noqa: E501
        :rtype: str
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this UpdateSurveyInputObject.

        Array of contact resources id message will be sent to  # noqa: E501

        :param contacts: The contacts of this UpdateSurveyInputObject.  # noqa: E501
        :type: str
        """

        self._contacts = contacts

    @property
    def lists(self):
        """Gets the lists of this UpdateSurveyInputObject.  # noqa: E501

        Array of list resources id message will be sent to  # noqa: E501

        :return: The lists of this UpdateSurveyInputObject.  # noqa: E501
        :rtype: str
        """
        return self._lists

    @lists.setter
    def lists(self, lists):
        """Sets the lists of this UpdateSurveyInputObject.

        Array of list resources id message will be sent to  # noqa: E501

        :param lists: The lists of this UpdateSurveyInputObject.  # noqa: E501
        :type: str
        """

        self._lists = lists

    @property
    def phones(self):
        """Gets the phones of this UpdateSurveyInputObject.  # noqa: E501

        Array of E.164 phone numbers message will be sent to  # noqa: E501

        :return: The phones of this UpdateSurveyInputObject.  # noqa: E501
        :rtype: str
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this UpdateSurveyInputObject.

        Array of E.164 phone numbers message will be sent to  # noqa: E501

        :param phones: The phones of this UpdateSurveyInputObject.  # noqa: E501
        :type: str
        """

        self._phones = phones

    @property
    def country(self):
        """Gets the country of this UpdateSurveyInputObject.  # noqa: E501

        Country values mapping (country => inbound phone id), e.g. country[GB] = \"123\", country[US] = \"123\"  # noqa: E501

        :return: The country of this UpdateSurveyInputObject.  # noqa: E501
        :rtype: object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UpdateSurveyInputObject.

        Country values mapping (country => inbound phone id), e.g. country[GB] = \"123\", country[US] = \"123\"  # noqa: E501

        :param country: The country of this UpdateSurveyInputObject.  # noqa: E501
        :type: object
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSurveyInputObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSurveyInputObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
