# coding: utf-8

"""
    TextMagic API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    Contact: support@textmagi.biz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ForwardedCall(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'call_time': 'datetime',
        'caller': 'str',
        'via': 'str',
        'receiver': 'str'
    }

    attribute_map = {
        'id': 'id',
        'call_time': 'callTime',
        'caller': 'caller',
        'via': 'via',
        'receiver': 'receiver'
    }

    def __init__(self, id=None, call_time=None, caller=None, via=None, receiver=None):  # noqa: E501
        """ForwardedCall - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._call_time = None
        self._caller = None
        self._via = None
        self._receiver = None
        self.discriminator = None

        self.id = id
        self.call_time = call_time
        self.caller = caller
        self.via = via
        self.receiver = receiver

    @property
    def id(self):
        """Gets the id of this ForwardedCall.  # noqa: E501


        :return: The id of this ForwardedCall.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ForwardedCall.


        :param id: The id of this ForwardedCall.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def call_time(self):
        """Gets the call_time of this ForwardedCall.  # noqa: E501


        :return: The call_time of this ForwardedCall.  # noqa: E501
        :rtype: datetime
        """
        return self._call_time

    @call_time.setter
    def call_time(self, call_time):
        """Sets the call_time of this ForwardedCall.


        :param call_time: The call_time of this ForwardedCall.  # noqa: E501
        :type: datetime
        """

        self._call_time = call_time

    @property
    def caller(self):
        """Gets the caller of this ForwardedCall.  # noqa: E501


        :return: The caller of this ForwardedCall.  # noqa: E501
        :rtype: str
        """
        return self._caller

    @caller.setter
    def caller(self, caller):
        """Sets the caller of this ForwardedCall.


        :param caller: The caller of this ForwardedCall.  # noqa: E501
        :type: str
        """

        self._caller = caller

    @property
    def via(self):
        """Gets the via of this ForwardedCall.  # noqa: E501

        Inbound id  # noqa: E501

        :return: The via of this ForwardedCall.  # noqa: E501
        :rtype: str
        """
        return self._via

    @via.setter
    def via(self, via):
        """Sets the via of this ForwardedCall.

        Inbound id  # noqa: E501

        :param via: The via of this ForwardedCall.  # noqa: E501
        :type: str
        """

        self._via = via

    @property
    def receiver(self):
        """Gets the receiver of this ForwardedCall.  # noqa: E501


        :return: The receiver of this ForwardedCall.  # noqa: E501
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this ForwardedCall.


        :param receiver: The receiver of this ForwardedCall.  # noqa: E501
        :type: str
        """

        self._receiver = receiver

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForwardedCall, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForwardedCall):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
