# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SendMessageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'type': 'str',
        'session_id': 'int',
        'bulk_id': 'int',
        'message_id': 'int',
        'schedule_id': 'int',
        'chat_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'type': 'type',
        'session_id': 'sessionId',
        'bulk_id': 'bulkId',
        'message_id': 'messageId',
        'schedule_id': 'scheduleId',
        'chat_id': 'chatId'
    }

    def __init__(self, id=None, href=None, type=None, session_id=None, bulk_id=None, message_id=None, schedule_id=None, chat_id=None):  # noqa: E501
        """SendMessageResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._href = None
        self._type = None
        self._session_id = None
        self._bulk_id = None
        self._message_id = None
        self._schedule_id = None
        self._chat_id = None
        self.discriminator = None

        self.id = id
        self.href = href
        self.type = type
        self.session_id = session_id
        self.bulk_id = bulk_id
        self.message_id = message_id
        self.schedule_id = schedule_id
        self.chat_id = chat_id

    @property
    def id(self):
        """Gets the id of this SendMessageResponse.  # noqa: E501


        :return: The id of this SendMessageResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SendMessageResponse.


        :param id: The id of this SendMessageResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this SendMessageResponse.  # noqa: E501


        :return: The href of this SendMessageResponse.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SendMessageResponse.


        :param href: The href of this SendMessageResponse.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def type(self):
        """Gets the type of this SendMessageResponse.  # noqa: E501


        :return: The type of this SendMessageResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendMessageResponse.


        :param type: The type of this SendMessageResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def session_id(self):
        """Gets the session_id of this SendMessageResponse.  # noqa: E501


        :return: The session_id of this SendMessageResponse.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SendMessageResponse.


        :param session_id: The session_id of this SendMessageResponse.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    @property
    def bulk_id(self):
        """Gets the bulk_id of this SendMessageResponse.  # noqa: E501


        :return: The bulk_id of this SendMessageResponse.  # noqa: E501
        :rtype: int
        """
        return self._bulk_id

    @bulk_id.setter
    def bulk_id(self, bulk_id):
        """Sets the bulk_id of this SendMessageResponse.


        :param bulk_id: The bulk_id of this SendMessageResponse.  # noqa: E501
        :type: int
        """

        self._bulk_id = bulk_id

    @property
    def message_id(self):
        """Gets the message_id of this SendMessageResponse.  # noqa: E501


        :return: The message_id of this SendMessageResponse.  # noqa: E501
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this SendMessageResponse.


        :param message_id: The message_id of this SendMessageResponse.  # noqa: E501
        :type: int
        """

        self._message_id = message_id

    @property
    def schedule_id(self):
        """Gets the schedule_id of this SendMessageResponse.  # noqa: E501


        :return: The schedule_id of this SendMessageResponse.  # noqa: E501
        :rtype: int
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this SendMessageResponse.


        :param schedule_id: The schedule_id of this SendMessageResponse.  # noqa: E501
        :type: int
        """

        self._schedule_id = schedule_id

    @property
    def chat_id(self):
        """Gets the chat_id of this SendMessageResponse.  # noqa: E501


        :return: The chat_id of this SendMessageResponse.  # noqa: E501
        :rtype: int
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this SendMessageResponse.


        :param chat_id: The chat_id of this SendMessageResponse.  # noqa: E501
        :type: int
        """

        self._chat_id = chat_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendMessageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendMessageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
