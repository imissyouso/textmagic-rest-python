# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ImportContactsInputObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column': 'list[ImportColumnMappingItem]',
        'list_name': 'str',
        'list_id': 'str'
    }

    attribute_map = {
        'column': 'column',
        'list_name': 'listName',
        'list_id': 'listId'
    }

    def __init__(self, column=None, list_name=None, list_id=None):  # noqa: E501
        """ImportContactsInputObject - a model defined in Swagger"""  # noqa: E501

        self._column = None
        self._list_name = None
        self._list_id = None
        self.discriminator = None

        self.column = column
        if list_name is not None:
            self.list_name = list_name
        if list_id is not None:
            self.list_id = list_id

    @property
    def column(self):
        """Gets the column of this ImportContactsInputObject.  # noqa: E501

        Column values mapping (number column => field), e.g. column[0] = \"phone\", column[1] = \"firstName\"  # noqa: E501

        :return: The column of this ImportContactsInputObject.  # noqa: E501
        :rtype: list[ImportColumnMappingItem]
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this ImportContactsInputObject.

        Column values mapping (number column => field), e.g. column[0] = \"phone\", column[1] = \"firstName\"  # noqa: E501

        :param column: The column of this ImportContactsInputObject.  # noqa: E501
        :type: list[ImportColumnMappingItem]
        """

        self._column = column

    @property
    def list_name(self):
        """Gets the list_name of this ImportContactsInputObject.  # noqa: E501

        List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end  # noqa: E501

        :return: The list_name of this ImportContactsInputObject.  # noqa: E501
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this ImportContactsInputObject.

        List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end  # noqa: E501

        :param list_name: The list_name of this ImportContactsInputObject.  # noqa: E501
        :type: str
        """

        self._list_name = list_name

    @property
    def list_id(self):
        """Gets the list_id of this ImportContactsInputObject.  # noqa: E501

        List ID contacts will be imported to  # noqa: E501

        :return: The list_id of this ImportContactsInputObject.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this ImportContactsInputObject.

        List ID contacts will be imported to  # noqa: E501

        :param list_id: The list_id of this ImportContactsInputObject.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportContactsInputObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportContactsInputObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
