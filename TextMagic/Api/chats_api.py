# coding: utf-8

"""
    TextMagic API Documentation

    # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png)   # noqa: E501

    OpenAPI spec version: 2
    Contact: support@textmagi.biz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TextMagic.api_client import ApiClient


class ChatsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def close_chats_bulk(self, close_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Close chats by chat ids or close all chats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_chats_bulk(close_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloseChatsBulkInputObject close_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.close_chats_bulk_with_http_info(close_chats_bulk_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.close_chats_bulk_with_http_info(close_chats_bulk_input_object, **kwargs)  # noqa: E501
            return data

    def close_chats_bulk_with_http_info(self, close_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Close chats by chat ids or close all chats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_chats_bulk_with_http_info(close_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloseChatsBulkInputObject close_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['close_chats_bulk_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method close_chats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'close_chats_bulk_input_object' is set
        if ('close_chats_bulk_input_object' not in params or
                params['close_chats_bulk_input_object'] is None):
            raise ValueError("Missing the required parameter `close_chats_bulk_input_object` when calling `close_chats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'close_chats_bulk_input_object' in params:
            body_params = params['close_chats_bulk_input_object']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/close/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def close_read_chats(self, **kwargs):  # noqa: E501
        """Close all chats that have no unread messages.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_read_chats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.close_read_chats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.close_read_chats_with_http_info(**kwargs)  # noqa: E501
            return data

    def close_read_chats_with_http_info(self, **kwargs):  # noqa: E501
        """Close all chats that have no unread messages.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_read_chats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method close_read_chats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/close/read', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_chat_messages(self, delete_chat_messages_bulk_input_object, id, **kwargs):  # noqa: E501
        """Delete messages from chat by given messages ID(s).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_chat_messages(delete_chat_messages_bulk_input_object, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteChatMessagesBulkInputObject delete_chat_messages_bulk_input_object: (required)
        :param int id: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_chat_messages_with_http_info(delete_chat_messages_bulk_input_object, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_chat_messages_with_http_info(delete_chat_messages_bulk_input_object, id, **kwargs)  # noqa: E501
            return data

    def delete_chat_messages_with_http_info(self, delete_chat_messages_bulk_input_object, id, **kwargs):  # noqa: E501
        """Delete messages from chat by given messages ID(s).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_chat_messages_with_http_info(delete_chat_messages_bulk_input_object, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteChatMessagesBulkInputObject delete_chat_messages_bulk_input_object: (required)
        :param int id: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_chat_messages_bulk_input_object', 'id', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_chat_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_chat_messages_bulk_input_object' is set
        if ('delete_chat_messages_bulk_input_object' not in params or
                params['delete_chat_messages_bulk_input_object'] is None):
            raise ValueError("Missing the required parameter `delete_chat_messages_bulk_input_object` when calling `delete_chat_messages`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_chat_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_chat_messages_bulk_input_object' in params:
            body_params = params['delete_chat_messages_bulk_input_object']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/{id}/messages/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_chats_bulk(self, delete_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Delete chats by given ID(s) or delete all chats.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_chats_bulk(delete_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteChatsBulkInputObject delete_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_chats_bulk_with_http_info(delete_chats_bulk_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_chats_bulk_with_http_info(delete_chats_bulk_input_object, **kwargs)  # noqa: E501
            return data

    def delete_chats_bulk_with_http_info(self, delete_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Delete chats by given ID(s) or delete all chats.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_chats_bulk_with_http_info(delete_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteChatsBulkInputObject delete_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_chats_bulk_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_chats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_chats_bulk_input_object' is set
        if ('delete_chats_bulk_input_object' not in params or
                params['delete_chats_bulk_input_object'] is None):
            raise ValueError("Missing the required parameter `delete_chats_bulk_input_object` when calling `delete_chats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_chats_bulk_input_object' in params:
            body_params = params['delete_chats_bulk_input_object']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_chats(self, **kwargs):  # noqa: E501
        """Get all user chats.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_chats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Fetch only (a)ctive, (c)losed or (d)eleted chats
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str order_by: Order results by some field. Default is id
        :param int voice: Fetch results with voice calls
        :param int flat: Should additional contact info be included
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_chats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_chats_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_chats_with_http_info(self, **kwargs):  # noqa: E501
        """Get all user chats.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_chats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Fetch only (a)ctive, (c)losed or (d)eleted chats
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str order_by: Order results by some field. Default is id
        :param int voice: Fetch results with voice calls
        :param int flat: Should additional contact info be included
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'page', 'limit', 'order_by', 'voice', 'flat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_chats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'voice' in params:
            query_params.append(('voice', params['voice']))  # noqa: E501
        if 'flat' in params:
            query_params.append(('flat', params['flat']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chat(self, id, **kwargs):  # noqa: E501
        """Get a single chat.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Chat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_chat_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_chat_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_chat_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a single chat.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Chat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_chat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Chat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chat_by_phone(self, phone, **kwargs):  # noqa: E501
        """Find chats by phone.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_by_phone(phone, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone: (required)
        :param int upsert: Create a new chat if not found
        :param int reopen: Reopen chat if found or do not change status
        :return: Chat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_chat_by_phone_with_http_info(phone, **kwargs)  # noqa: E501
        else:
            (data) = self.get_chat_by_phone_with_http_info(phone, **kwargs)  # noqa: E501
            return data

    def get_chat_by_phone_with_http_info(self, phone, **kwargs):  # noqa: E501
        """Find chats by phone.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_by_phone_with_http_info(phone, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone: (required)
        :param int upsert: Create a new chat if not found
        :param int reopen: Reopen chat if found or do not change status
        :return: Chat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone', 'upsert', 'reopen']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chat_by_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `get_chat_by_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone' in params:
            path_params['phone'] = params['phone']  # noqa: E501

        query_params = []
        if 'upsert' in params:
            query_params.append(('upsert', params['upsert']))  # noqa: E501
        if 'reopen' in params:
            query_params.append(('reopen', params['reopen']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/{phone}/by/phone', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Chat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chat_messages(self, id, **kwargs):  # noqa: E501
        """Fetch messages from chat with specified chat id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_messages(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str query: Find messages by specified search query
        :param int start: Return messages since specified timestamp only
        :param int end: Return messages up to specified timestamp only
        :param str direction: Order direction. Default is desc
        :param int voice: Fetch results with voice calls
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_chat_messages_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_chat_messages_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_chat_messages_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetch messages from chat with specified chat id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chat_messages_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str query: Find messages by specified search query
        :param int start: Return messages since specified timestamp only
        :param int end: Return messages up to specified timestamp only
        :param str direction: Order direction. Default is desc
        :param int voice: Fetch results with voice calls
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page', 'limit', 'query', 'start', 'end', 'direction', 'voice']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chat_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_chat_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'voice' in params:
            query_params.append(('voice', params['voice']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/{id}/message', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_unread_messages_total(self, **kwargs):  # noqa: E501
        """Get total amount of unread messages in the current user chats.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unread_messages_total(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetUnreadMessagesTotalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_unread_messages_total_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_unread_messages_total_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_unread_messages_total_with_http_info(self, **kwargs):  # noqa: E501
        """Get total amount of unread messages in the current user chats.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unread_messages_total_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetUnreadMessagesTotalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unread_messages_total" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/unread/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUnreadMessagesTotalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_chats_read_bulk(self, mark_chats_read_bulk_input_object, **kwargs):  # noqa: E501
        """Mark several chats as read by chat ids or mark all chats as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_chats_read_bulk(mark_chats_read_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MarkChatsReadBulkInputObject mark_chats_read_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_chats_read_bulk_with_http_info(mark_chats_read_bulk_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_chats_read_bulk_with_http_info(mark_chats_read_bulk_input_object, **kwargs)  # noqa: E501
            return data

    def mark_chats_read_bulk_with_http_info(self, mark_chats_read_bulk_input_object, **kwargs):  # noqa: E501
        """Mark several chats as read by chat ids or mark all chats as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_chats_read_bulk_with_http_info(mark_chats_read_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MarkChatsReadBulkInputObject mark_chats_read_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mark_chats_read_bulk_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_chats_read_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mark_chats_read_bulk_input_object' is set
        if ('mark_chats_read_bulk_input_object' not in params or
                params['mark_chats_read_bulk_input_object'] is None):
            raise ValueError("Missing the required parameter `mark_chats_read_bulk_input_object` when calling `mark_chats_read_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mark_chats_read_bulk_input_object' in params:
            body_params = params['mark_chats_read_bulk_input_object']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/read/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_chats_unread_bulk(self, mark_chats_unread_bulk_input_object, **kwargs):  # noqa: E501
        """Mark several chats as UNread by chat ids or mark all chats as UNread  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_chats_unread_bulk(mark_chats_unread_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MarkChatsUnreadBulkInputObject mark_chats_unread_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_chats_unread_bulk_with_http_info(mark_chats_unread_bulk_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_chats_unread_bulk_with_http_info(mark_chats_unread_bulk_input_object, **kwargs)  # noqa: E501
            return data

    def mark_chats_unread_bulk_with_http_info(self, mark_chats_unread_bulk_input_object, **kwargs):  # noqa: E501
        """Mark several chats as UNread by chat ids or mark all chats as UNread  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_chats_unread_bulk_with_http_info(mark_chats_unread_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MarkChatsUnreadBulkInputObject mark_chats_unread_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mark_chats_unread_bulk_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_chats_unread_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mark_chats_unread_bulk_input_object' is set
        if ('mark_chats_unread_bulk_input_object' not in params or
                params['mark_chats_unread_bulk_input_object'] is None):
            raise ValueError("Missing the required parameter `mark_chats_unread_bulk_input_object` when calling `mark_chats_unread_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mark_chats_unread_bulk_input_object' in params:
            body_params = params['mark_chats_unread_bulk_input_object']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/unread/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mute_chat(self, mute_chat_input_object, **kwargs):  # noqa: E501
        """Set mute mode.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mute_chat(mute_chat_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MuteChatInputObject mute_chat_input_object: (required)
        :param bool x_ignore_null_values:
        :return: ResourceLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mute_chat_with_http_info(mute_chat_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.mute_chat_with_http_info(mute_chat_input_object, **kwargs)  # noqa: E501
            return data

    def mute_chat_with_http_info(self, mute_chat_input_object, **kwargs):  # noqa: E501
        """Set mute mode.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mute_chat_with_http_info(mute_chat_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MuteChatInputObject mute_chat_input_object: (required)
        :param bool x_ignore_null_values:
        :return: ResourceLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mute_chat_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mute_chat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mute_chat_input_object' is set
        if ('mute_chat_input_object' not in params or
                params['mute_chat_input_object'] is None):
            raise ValueError("Missing the required parameter `mute_chat_input_object` when calling `mute_chat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mute_chat_input_object' in params:
            body_params = params['mute_chat_input_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/mute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceLinkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mute_chats_bulk(self, mute_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Mute several chats by chat ids or mute all chats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mute_chats_bulk(mute_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MuteChatsBulkInputObject mute_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mute_chats_bulk_with_http_info(mute_chats_bulk_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.mute_chats_bulk_with_http_info(mute_chats_bulk_input_object, **kwargs)  # noqa: E501
            return data

    def mute_chats_bulk_with_http_info(self, mute_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Mute several chats by chat ids or mute all chats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mute_chats_bulk_with_http_info(mute_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MuteChatsBulkInputObject mute_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mute_chats_bulk_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mute_chats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mute_chats_bulk_input_object' is set
        if ('mute_chats_bulk_input_object' not in params or
                params['mute_chats_bulk_input_object'] is None):
            raise ValueError("Missing the required parameter `mute_chats_bulk_input_object` when calling `mute_chats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mute_chats_bulk_input_object' in params:
            body_params = params['mute_chats_bulk_input_object']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/mute/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reopen_chats_bulk(self, reopen_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Reopen chats by chat ids or reopen all chats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reopen_chats_bulk(reopen_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReopenChatsBulkInputObject reopen_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reopen_chats_bulk_with_http_info(reopen_chats_bulk_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.reopen_chats_bulk_with_http_info(reopen_chats_bulk_input_object, **kwargs)  # noqa: E501
            return data

    def reopen_chats_bulk_with_http_info(self, reopen_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Reopen chats by chat ids or reopen all chats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reopen_chats_bulk_with_http_info(reopen_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReopenChatsBulkInputObject reopen_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reopen_chats_bulk_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reopen_chats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reopen_chats_bulk_input_object' is set
        if ('reopen_chats_bulk_input_object' not in params or
                params['reopen_chats_bulk_input_object'] is None):
            raise ValueError("Missing the required parameter `reopen_chats_bulk_input_object` when calling `reopen_chats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reopen_chats_bulk_input_object' in params:
            body_params = params['reopen_chats_bulk_input_object']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/reopen/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_chats(self, **kwargs):  # noqa: E501
        """Find chats by inbound or outbound messages text.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_chats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str query: Find chats by specified search query
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_chats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_chats_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_chats_with_http_info(self, **kwargs):  # noqa: E501
        """Find chats by inbound or outbound messages text.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_chats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str query: Find chats by specified search query
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_chats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_chats_by_ids(self, **kwargs):  # noqa: E501
        """Find chats by IDs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_chats_by_ids(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str ids: Find chats by ID(s)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_chats_by_ids_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_chats_by_ids_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_chats_by_ids_with_http_info(self, **kwargs):  # noqa: E501
        """Find chats by IDs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_chats_by_ids_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str ids: Find chats by ID(s)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_chats_by_ids" % key
                )
            params[key] = val
        del params['kwargs']

        if 'ids' in params and not re.search(r'[,\\d]+', params['ids']):  # noqa: E501
            raise ValueError("Invalid value for parameter `ids` when calling `search_chats_by_ids`, must conform to the pattern `/[,\\d]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/search/ids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_chats_by_receipent(self, **kwargs):  # noqa: E501
        """Find chats by recipient (contact, list name or phone number).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_chats_by_receipent(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str query: Find chats by specified search query
        :param str order_by: Order results by some field. Default is id
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_chats_by_receipent_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_chats_by_receipent_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_chats_by_receipent_with_http_info(self, **kwargs):  # noqa: E501
        """Find chats by recipient (contact, list name or phone number).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_chats_by_receipent_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Fetch specified results page
        :param int limit: How many results to return
        :param str query: Find chats by specified search query
        :param str order_by: Order results by some field. Default is id
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'query', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_chats_by_receipent" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/search/recipients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_chat_status(self, set_chat_status_input_object, **kwargs):  # noqa: E501
        """Set status of the chat given by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_chat_status(set_chat_status_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetChatStatusInputObject set_chat_status_input_object: (required)
        :param bool x_ignore_null_values:
        :return: ResourceLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_chat_status_with_http_info(set_chat_status_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.set_chat_status_with_http_info(set_chat_status_input_object, **kwargs)  # noqa: E501
            return data

    def set_chat_status_with_http_info(self, set_chat_status_input_object, **kwargs):  # noqa: E501
        """Set status of the chat given by ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_chat_status_with_http_info(set_chat_status_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetChatStatusInputObject set_chat_status_input_object: (required)
        :param bool x_ignore_null_values:
        :return: ResourceLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_chat_status_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_chat_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_chat_status_input_object' is set
        if ('set_chat_status_input_object' not in params or
                params['set_chat_status_input_object'] is None):
            raise ValueError("Missing the required parameter `set_chat_status_input_object` when calling `set_chat_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_chat_status_input_object' in params:
            body_params = params['set_chat_status_input_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceLinkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unmute_chats_bulk(self, unmute_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Unmute several chats by chat ids or unmute all chats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unmute_chats_bulk(unmute_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnmuteChatsBulkInputObject unmute_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unmute_chats_bulk_with_http_info(unmute_chats_bulk_input_object, **kwargs)  # noqa: E501
        else:
            (data) = self.unmute_chats_bulk_with_http_info(unmute_chats_bulk_input_object, **kwargs)  # noqa: E501
            return data

    def unmute_chats_bulk_with_http_info(self, unmute_chats_bulk_input_object, **kwargs):  # noqa: E501
        """Unmute several chats by chat ids or unmute all chats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unmute_chats_bulk_with_http_info(unmute_chats_bulk_input_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnmuteChatsBulkInputObject unmute_chats_bulk_input_object: (required)
        :param bool x_ignore_null_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unmute_chats_bulk_input_object', 'x_ignore_null_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unmute_chats_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unmute_chats_bulk_input_object' is set
        if ('unmute_chats_bulk_input_object' not in params or
                params['unmute_chats_bulk_input_object'] is None):
            raise ValueError("Missing the required parameter `unmute_chats_bulk_input_object` when calling `unmute_chats_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ignore_null_values' in params:
            header_params['X-Ignore-Null-Values'] = params['x_ignore_null_values']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unmute_chats_bulk_input_object' in params:
            body_params = params['unmute_chats_bulk_input_object']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/chats/unmute/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
